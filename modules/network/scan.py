from core.logger import logger
import subprocess
import platform
import time

import sys
import os
import subprocess
from rich.console import Console
from core.logger import logger

console = Console()
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))


def scan_ports(target: str):
    console.rule("[bold green]Port Scanner")
    try:
        result = subprocess.check_output(["nmap", "-T4", "-F", target], text=True)
        console.print(f"[cyan]{result}[/cyan]")
        logger.info(f"Port scan completed for target: {target}")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞:[/red] {e}")
        logger.error(f"Port scan failed for target {target}: {e}")


def show_interfaces():
    console.rule("[bold green]–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
    try:
        result = subprocess.check_output(["ip", "a"], text=True)
        console.print(f"[white]{result}[/white]")
        logger.info("Network interfaces displayed successfully")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:[/red] {e}")
        logger.error(f"Failed to show interfaces: {e}")


def show_routes():
    console.rule("[bold green]–ú–∞—Ä—à—Ä—É—Ç—ã")
    try:
        result = subprocess.check_output(["ip", "route"], text=True)
        console.print(f"[white]{result}[/white]")
        logger.info("Routing table displayed successfully")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:[/red] {e}")
        logger.error(f"Failed to show routes: {e}")


def show_connections():
    console.rule("[bold green]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    try:
        result = subprocess.check_output(["ss", "-tunap"], text=True)
        console.print(f"[white]{result}[/white]")
        logger.info("Active connections displayed successfully")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:[/red] {e}")
        logger.error(f"Failed to show active connections: {e}")


def ping_host(host: str):
    console.rule(f"[bold green]Ping {host}")
    try:
        result = subprocess.check_output(["ping", "-c", "4", host], text=True)
        console.print(f"[cyan]{result}[/cyan]")
        logger.info(f"Ping to {host} successful")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ ping:[/red] {e}")
        logger.error(f"Ping to {host} failed: {e}")


def net_scan(target="127.0.0.1"):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã–≤–æ–¥–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
    """

    logger.info(f"üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞: {target}")
    print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target}...\n")

    try:
        start_time = time.time()

        if platform.system().lower() == "linux":
            command = ["ping", "-c", "4", target]
        else:
            command = ["ping", target]

        result = subprocess.run(command, capture_output=True, text=True)

        if result.returncode == 0:
            logger.info(f"‚úÖ –•–æ—Å—Ç {target} –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(result.stdout)
        else:
            logger.warning(f"‚ö†Ô∏è –•–æ—Å—Ç {target} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            print(result.stderr)

        duration = time.time() - start_time
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
