from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from datetime import datetime
import os
import json
from scapy.all import sniff, ARP, ICMPv6ND_NS, IPv6
from sysfox.core.logger import setup_logger

console = Console()
logger = setup_logger()

found_hosts = []

# –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
mac_table = {}


def log_ndp_event(ip, mac, status):
    found_hosts.append({"ip": ip, "mac": mac, "status": status})


def save_ndp_report():
    folder = "reports"
    os.makedirs(folder, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = os.path.join(folder, f"ndp_{timestamp}.txt")

    lines = []
    lines.append("\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ –°–µ—Ç—å ARP/NDP –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ")
    for host in found_hosts:
        ip = host["ip"]
        mac = host["mac"]
        status = host["status"]

        if status == "active":
            lines.append(f"‚îÇ üü¢ {ip} ‚Üí MAC: {mac}")
        elif status == "suspicious":
            lines.append(f"‚îÇ üî∂ {ip} ‚Üí ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–µ–Ω—É! MAC: {mac}")
        elif status == "lost":
            lines.append(f"‚îÇ üî¥ {ip} ‚Üí ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            lines.append(f"‚îÇ ‚ö™ {ip} ‚Üí MAC: {mac}")

    lines.append("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n")

    with open(filename, "w") as f:
        f.write("\n".join(lines))

    return filename


def display_network_map():
    console.print("\nüìä [bold cyan]–°–≤–æ–¥–∫–∞:[/bold cyan]\n")
    print("\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ –°–µ—Ç—å ARP/NDP –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ")
    for host in found_hosts:
        ip = host["ip"]
        mac = host["mac"]
        status = host["status"]

        if status == "active":
            print(f"‚îÇ üü¢ {ip} ‚Üí MAC: {mac}")
        elif status == "suspicious":
            print(f"‚îÇ üî∂ {ip} ‚Üí ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–µ–Ω—É! MAC: {mac}")
        elif status == "lost":
            print(f"‚îÇ üî¥ {ip} ‚Üí ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            print(f"‚îÇ ‚ö™ {ip} ‚Üí MAC: {mac}")
    print("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n")
    return save_ndp_report()


def start_ndp_scan(timeout):
    logger.info("[NDP] –ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏")
    console.print("[bold blue]üì° –ó–∞—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ[/bold blue]", timeout, "[bold blue]—Å–µ–∫—É–Ω–¥...[/bold blue]")

    def handle_packet(packet):
        if ARP in packet and packet[ARP].op == 2:
            ip = packet[ARP].psrc
            mac = packet[ARP].hwsrc
            logger.info(f"[ARP] –û–±–Ω–∞—Ä—É–∂–µ–Ω {ip} -> {mac}")

            if ip in mac_table:
                if mac_table[ip] != mac:
                    status = "suspicious"
                else:
                    status = "active"
            else:
                status = "active"
            mac_table[ip] = mac
            log_ndp_event(ip, mac, status)

        elif IPv6 in packet and ICMPv6ND_NS in packet:
            ip = packet[IPv6].src
            logger.info(f"[NDP] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ IPv6 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {ip}")
            log_ndp_event(ip, "IPv6", "active")

    sniff(prn=handle_packet, store=False, timeout=timeout)
    report_path = display_network_map()
    console.print(f"‚úî –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: [green]{report_path}[/green]")
    logger.info(f"[NDP] –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
    logger.info("[NDP] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
